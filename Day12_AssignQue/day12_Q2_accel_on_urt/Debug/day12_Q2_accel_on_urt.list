
day12_Q2_accel_on_urt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001588  08001588  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001590  08001590  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001598  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c33  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a4a  00000000  00000000  00004cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00005700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000164  00000000  00000000  00005910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019672  00000000  00000000  00005a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000291a  00000000  00000000  0001f0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c14b  00000000  00000000  00021a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000adb4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000aec  00000000  00000000  000adb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000ae67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000097  00000000  00000000  000ae6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001524 	.word	0x08001524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001524 	.word	0x08001524

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <AccelInit>:
 */

#include "accel.h"

void AccelInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	//init spi
	SpiInit();
 8000276:	f000 fa8f 	bl	8000798 <SpiInit>
	//power on accel with all 3 axis enabled
	uint8_t val[1];
	val[0] = CR4_ODR_25 | CR4_XYZ_EN;
 800027a:	2347      	movs	r3, #71	@ 0x47
 800027c:	713b      	strb	r3, [r7, #4]
	SpiWrite(ACCEL_CR4, val, 1);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2201      	movs	r2, #1
 8000282:	4619      	mov	r1, r3
 8000284:	2020      	movs	r0, #32
 8000286:	f000 fb43 	bl	8000910 <SpiWrite>

}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <AccelWaitForChange>:
int AccelWaitForChange(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0

	uint8_t val[1];
	do{
		 SpiRead(ACCEL_STATUS, val,1);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2201      	movs	r2, #1
 800029c:	4619      	mov	r1, r3
 800029e:	2027      	movs	r0, #39	@ 0x27
 80002a0:	f000 fb60 	bl	8000964 <SpiRead>
    }while(!(val[0] & STATUS_XYZ_DA));
 80002a4:	793b      	ldrb	r3, [r7, #4]
 80002a6:	f003 0308 	and.w	r3, r3, #8
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f4      	beq.n	8000298 <AccelWaitForChange+0x6>
    return 1;
 80002ae:	2301      	movs	r3, #1
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <AccelRead>:
void AccelRead(AccelData_t *data)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 	uint8_t val[2];
 	//read x axis values (x1 & xh)
 	SpiRead(ACCEL_X, val, 2);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	2202      	movs	r2, #2
 80002c6:	4619      	mov	r1, r3
 80002c8:	2028      	movs	r0, #40	@ 0x28
 80002ca:	f000 fb4b 	bl	8000964 <SpiRead>
 	//combine them to make 16 bit x value
 	data->x = val[0] | ((uint16_t)val[1] << 8);
 80002ce:	7b3b      	ldrb	r3, [r7, #12]
 80002d0:	b21a      	sxth	r2, r3
 80002d2:	7b7b      	ldrb	r3, [r7, #13]
 80002d4:	b21b      	sxth	r3, r3
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	b21b      	sxth	r3, r3
 80002da:	4313      	orrs	r3, r2
 80002dc:	b21a      	sxth	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	801a      	strh	r2, [r3, #0]

 	// read y axis values (yl & yh)
 	SpiRead(ACCEL_Y, val, 2);
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	2202      	movs	r2, #2
 80002e8:	4619      	mov	r1, r3
 80002ea:	202a      	movs	r0, #42	@ 0x2a
 80002ec:	f000 fb3a 	bl	8000964 <SpiRead>
 	//combine them to make 16 bit y value
 	data->y = val[0] | ((uint16_t)val[1] << 8);
 80002f0:	7b3b      	ldrb	r3, [r7, #12]
 80002f2:	b21a      	sxth	r2, r3
 80002f4:	7b7b      	ldrb	r3, [r7, #13]
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	021b      	lsls	r3, r3, #8
 80002fa:	b21b      	sxth	r3, r3
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b21a      	sxth	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	805a      	strh	r2, [r3, #2]

 	//read z axis values (z1 & zh)
 	SpiRead(ACCEL_Z, val, 2);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	2202      	movs	r2, #2
 800030a:	4619      	mov	r1, r3
 800030c:	202c      	movs	r0, #44	@ 0x2c
 800030e:	f000 fb29 	bl	8000964 <SpiRead>

 	//combine them to make 16 bit z value
 	data->z = val[0] | ((uint16_t)val[1] << 8);
 8000312:	7b3b      	ldrb	r3, [r7, #12]
 8000314:	b21a      	sxth	r2, r3
 8000316:	7b7b      	ldrb	r3, [r7, #13]
 8000318:	b21b      	sxth	r3, r3
 800031a:	021b      	lsls	r3, r3, #8
 800031c:	b21b      	sxth	r3, r3
 800031e:	4313      	orrs	r3, r2
 8000320:	b21a      	sxth	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	809a      	strh	r2, [r3, #4]



}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <I2CInit>:
 *      Author: admin
 */

#include "i2c.h"

void I2CInit(void) {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	// gpio config
	// enable gpio b clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000334:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <I2CInit+0xac>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000338:	4a28      	ldr	r2, [pc, #160]	@ (80003dc <I2CInit+0xac>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	@ 0x30
	// set mode as alt fn (10)
	GPIOB->MODER |= BV(2*6+1) | BV(2*7+1);
 8000340:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <I2CInit+0xb0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a26      	ldr	r2, [pc, #152]	@ (80003e0 <I2CInit+0xb0>)
 8000346:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800034a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(2*6) | BV(2*7));
 800034c:	4b24      	ldr	r3, [pc, #144]	@ (80003e0 <I2CInit+0xb0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a23      	ldr	r2, [pc, #140]	@ (80003e0 <I2CInit+0xb0>)
 8000352:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8000356:	6013      	str	r3, [r2, #0]
	// set alt fn to AF4 (i2c)
	GPIOB->AFR[0] = (4 << (4*6)) | (4 << (4*7));
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <I2CInit+0xb0>)
 800035a:	f04f 4288 	mov.w	r2, #1140850688	@ 0x44000000
 800035e:	621a      	str	r2, [r3, #32]
	// no pull up & pull down regr
	GPIOB->PUPDR &= ~(BV(2*6+1) | BV(2*7+1) | BV(2*6) | BV(2*7));
 8000360:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <I2CInit+0xb0>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a1e      	ldr	r2, [pc, #120]	@ (80003e0 <I2CInit+0xb0>)
 8000366:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800036a:	60d3      	str	r3, [r2, #12]
	// Enable open-drain for PB6 & PB7
	GPIOB->OTYPER |= BV(6) | BV(7);
 800036c:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <I2CInit+0xb0>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a1b      	ldr	r2, [pc, #108]	@ (80003e0 <I2CInit+0xb0>)
 8000372:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000376:	6053      	str	r3, [r2, #4]

	// i2c config
	// enable i2c peri clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <I2CInit+0xac>)
 800037a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800037c:	4a17      	ldr	r2, [pc, #92]	@ (80003dc <I2CInit+0xac>)
 800037e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000382:	6413      	str	r3, [r2, #64]	@ 0x40
	// i2c sw reset
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000384:	4b17      	ldr	r3, [pc, #92]	@ (80003e4 <I2CInit+0xb4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a16      	ldr	r2, [pc, #88]	@ (80003e4 <I2CInit+0xb4>)
 800038a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800038e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 = 0;				// clear all CR1 bits
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <I2CInit+0xb4>)
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
	// peri clock -- CR2 = 16MHz
	I2C1->CR2 |= 16 << I2C_CR2_FREQ_Pos;
 8000396:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <I2CInit+0xb4>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <I2CInit+0xb4>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	6053      	str	r3, [r2, #4]
	// set i2c clock -- CCR = 80 (Std mode=100KHz)
	I2C1->CCR = 80;
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <I2CInit+0xb4>)
 80003a4:	2250      	movs	r2, #80	@ 0x50
 80003a6:	61da      	str	r2, [r3, #28]
	I2C1->CCR &= ~I2C_CCR_FS;	// standard mode (default)
 80003a8:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <I2CInit+0xb4>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <I2CInit+0xb4>)
 80003ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003b2:	61d3      	str	r3, [r2, #28]
	// set Trise -- TRISE = 17
	I2C1->TRISE = 17;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <I2CInit+0xb4>)
 80003b6:	2211      	movs	r2, #17
 80003b8:	621a      	str	r2, [r3, #32]
	// enable ack
	I2C1->CR1 |= I2C_CR1_ACK;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <I2CInit+0xb4>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a09      	ldr	r2, [pc, #36]	@ (80003e4 <I2CInit+0xb4>)
 80003c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003c4:	6013      	str	r3, [r2, #0]
	// enable i2c peri
	I2C1->CR1 |= I2C_CR1_PE;
 80003c6:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <I2CInit+0xb4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <I2CInit+0xb4>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6013      	str	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020400 	.word	0x40020400
 80003e4:	40005400 	.word	0x40005400

080003e8 <I2CStart>:

void I2CStart(void) {
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	// send start bit
	I2C1->CR1 |= I2C_CR1_START;
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <I2CStart+0x28>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a07      	ldr	r2, [pc, #28]	@ (8000410 <I2CStart+0x28>)
 80003f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f6:	6013      	str	r3, [r2, #0]
	// wait for start bit sent on bus
	while(!(I2C1->SR1 & I2C_SR1_SB));	// while((I2C1->SR1 & I2C_SR1_SB) == 0);
 80003f8:	bf00      	nop
 80003fa:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <I2CStart+0x28>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0f9      	beq.n	80003fa <I2CStart+0x12>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40005400 	.word	0x40005400

08000414 <I2CStop>:

void I2CRepeatStart(void) {
	I2CStart();
}

void I2CStop(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	// send stop bit
	I2C1->CR1 |= I2C_CR1_STOP;
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <I2CStop+0x28>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a07      	ldr	r2, [pc, #28]	@ (800043c <I2CStop+0x28>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000422:	6013      	str	r3, [r2, #0]
	// wait for stop bit sent on bus
	while(I2C1->SR2 & I2C_SR2_BUSY);		// while((I2C1->SR2 & I2C_SR2_BUSY) != 0);
 8000424:	bf00      	nop
 8000426:	4b05      	ldr	r3, [pc, #20]	@ (800043c <I2CStop+0x28>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1f9      	bne.n	8000426 <I2CStop+0x12>
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40005400 	.word	0x40005400

08000440 <I2CSendSlaveAddr>:

void I2CSendSlaveAddr(uint8_t addr) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
	// write slave addr in DR
	I2C1->DR = addr;
 800044a:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <I2CSendSlaveAddr+0x30>)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	6113      	str	r3, [r2, #16]
	// wait until slave addr is sent
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000450:	bf00      	nop
 8000452:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <I2CSendSlaveAddr+0x30>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <I2CSendSlaveAddr+0x12>
	// read status regrs to clear acks
	(void)I2C1->SR1;
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <I2CSendSlaveAddr+0x30>)
 8000460:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000462:	4b03      	ldr	r3, [pc, #12]	@ (8000470 <I2CSendSlaveAddr+0x30>)
 8000464:	699b      	ldr	r3, [r3, #24]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40005400 	.word	0x40005400

08000474 <I2CSendData>:

void I2CSendData(uint8_t data) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	// wait until data is sent
	while(!(I2C1->SR1 & I2C_SR1_TXE));
 800047e:	bf00      	nop
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <I2CSendData+0x38>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <I2CSendData+0xc>
	// write data in DR
	I2C1->DR = data;
 800048c:	4a07      	ldr	r2, [pc, #28]	@ (80004ac <I2CSendData+0x38>)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	6113      	str	r3, [r2, #16]
	// poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000492:	bf00      	nop
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <I2CSendData+0x38>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <I2CSendData+0x20>
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40005400 	.word	0x40005400

080004b0 <I2CWrite>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	// collect received data and return it
	return I2C1->DR;
}

void I2CWrite(uint8_t addr, uint8_t data) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	460a      	mov	r2, r1
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
	I2CStart();
 80004c0:	f7ff ff92 	bl	80003e8 <I2CStart>
	I2CSendSlaveAddr(addr);
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ffba 	bl	8000440 <I2CSendSlaveAddr>
	I2CSendData(data);
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffd0 	bl	8000474 <I2CSendData>
	I2CStop();
 80004d4:	f7ff ff9e 	bl	8000414 <I2CStop>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <DelayMs+0x44>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <DelayMs+0x48>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <DelayMs+0x4c>)
 80004f4:	fba2 2303 	umull	r2, r3, r2, r3
 80004f8:	099b      	lsrs	r3, r3, #6
 80004fa:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000506:	bf00      	nop
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <DelayMs+0x44>)
 800050a:	685a      	ldr	r2, [r3, #4]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3f8      	bcc.n	8000508 <DelayMs+0x28>
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e0001000 	.word	0xe0001000
 8000528:	20000000 	.word	0x20000000
 800052c:	10624dd3 	.word	0x10624dd3

08000530 <LcdInit>:
 *      Author: admin
 */

#include "lcd.h"

void LcdInit(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// i2c initialization
	I2CInit();
 8000534:	f7ff fefc 	bl	8000330 <I2CInit>
	// lcd initialization
	DelayMs(20);
 8000538:	2014      	movs	r0, #20
 800053a:	f7ff ffd1 	bl	80004e0 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800053e:	2103      	movs	r1, #3
 8000540:	2000      	movs	r0, #0
 8000542:	f000 f82e 	bl	80005a2 <LcdWriteNibble>
	DelayMs(5);
 8000546:	2005      	movs	r0, #5
 8000548:	f7ff ffca 	bl	80004e0 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800054c:	2103      	movs	r1, #3
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f827 	bl	80005a2 <LcdWriteNibble>
	DelayMs(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffc3 	bl	80004e0 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800055a:	2103      	movs	r1, #3
 800055c:	2000      	movs	r0, #0
 800055e:	f000 f820 	bl	80005a2 <LcdWriteNibble>
	DelayMs(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff ffbc 	bl	80004e0 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x02);
 8000568:	2102      	movs	r1, #2
 800056a:	2000      	movs	r0, #0
 800056c:	f000 f819 	bl	80005a2 <LcdWriteNibble>
	DelayMs(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ffb5 	bl	80004e0 <DelayMs>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 8000576:	2128      	movs	r1, #40	@ 0x28
 8000578:	2000      	movs	r0, #0
 800057a:	f000 f84a 	bl	8000612 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 800057e:	2108      	movs	r1, #8
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f846 	bl	8000612 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 8000586:	2101      	movs	r1, #1
 8000588:	2000      	movs	r0, #0
 800058a:	f000 f842 	bl	8000612 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 800058e:	2106      	movs	r1, #6
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f83e 	bl	8000612 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 8000596:	210c      	movs	r1, #12
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f83a 	bl	8000612 <LcdWriteByte>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	460a      	mov	r2, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	bf0c      	ite	eq
 80005b8:	2301      	moveq	r3, #1
 80005ba:	2300      	movne	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 80005c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	b25a      	sxtb	r2, r3
 80005c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	f043 030c 	orr.w	r3, r3, #12
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	4619      	mov	r1, r3
 80005dc:	204e      	movs	r0, #78	@ 0x4e
 80005de:	f7ff ff67 	bl	80004b0 <I2CWrite>
	DelayMs(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff ff7c 	bl	80004e0 <DelayMs>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 80005e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b25a      	sxtb	r2, r3
 80005f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	4619      	mov	r1, r3
 8000604:	204e      	movs	r0, #78	@ 0x4e
 8000606:	f7ff ff53 	bl	80004b0 <I2CWrite>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	460a      	mov	r2, r1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	4613      	mov	r3, r2
 8000620:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	091b      	lsrs	r3, r3, #4
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	f003 030f 	and.w	r3, r3, #15
 800062e:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffb3 	bl	80005a2 <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 800063c:	7bba      	ldrb	r2, [r7, #14]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffad 	bl	80005a2 <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	DelayMs(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff49 	bl	80004e0 <DelayMs>
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	6039      	str	r1, [r7, #0]
 8000660:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4619      	mov	r1, r3
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff ffd3 	bl	8000612 <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	e00a      	b.n	8000688 <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4619      	mov	r1, r3
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff ffc8 	bl	8000612 <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3301      	adds	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1ee      	bne.n	8000672 <LcdPuts+0x1c>
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <DelayMs+0x44>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <DelayMs+0x48>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <DelayMs+0x4c>)
 80006b4:	fba2 2303 	umull	r2, r3, r2, r3
 80006b8:	099b      	lsrs	r3, r3, #6
 80006ba:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	fb02 f303 	mul.w	r3, r2, r3
 80006c4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80006c6:	bf00      	nop
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <DelayMs+0x44>)
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d3f8      	bcc.n	80006c8 <DelayMs+0x28>
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e0001000 	.word	0xe0001000
 80006e8:	20000000 	.word	0x20000000
 80006ec:	10624dd3 	.word	0x10624dd3

080006f0 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0

	char str[32];
	AccelData_t accel;
	LcdInit();
 80006f6:	f7ff ff1b 	bl	8000530 <LcdInit>
	AccelInit();
 80006fa:	f7ff fdb9 	bl	8000270 <AccelInit>
	UartInit(9600);
 80006fe:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000702:	f000 f9c7 	bl	8000a94 <UartInit>
	while(AccelWaitForChange()){
 8000706:	e036      	b.n	8000776 <main+0x86>
		AccelRead(&accel);
 8000708:	463b      	mov	r3, r7
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdd4 	bl	80002b8 <AccelRead>
		sprintf(str, "%d, %d",accel.x, accel.y);
 8000710:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000714:	461a      	mov	r2, r3
 8000716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800071a:	f107 0008 	add.w	r0, r7, #8
 800071e:	491b      	ldr	r1, [pc, #108]	@ (800078c <main+0x9c>)
 8000720:	f000 fa68 	bl	8000bf4 <siprintf>
		LcdPuts(LCD_LINE1, str);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	2080      	movs	r0, #128	@ 0x80
 800072c:	f7ff ff93 	bl	8000656 <LcdPuts>
		UartPuts(str);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fa17 	bl	8000b68 <UartPuts>
		UartPuts("\r\n");
 800073a:	4815      	ldr	r0, [pc, #84]	@ (8000790 <main+0xa0>)
 800073c:	f000 fa14 	bl	8000b68 <UartPuts>

		sprintf(str,"ACCEL %d ",accel.z);
 8000740:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000744:	461a      	mov	r2, r3
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4912      	ldr	r1, [pc, #72]	@ (8000794 <main+0xa4>)
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fa51 	bl	8000bf4 <siprintf>
		LcdPuts(LCD_LINE2, str);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	20c0      	movs	r0, #192	@ 0xc0
 800075a:	f7ff ff7c 	bl	8000656 <LcdPuts>
		UartPuts(str);
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fa00 	bl	8000b68 <UartPuts>
		UartPuts("\r\n");
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <main+0xa0>)
 800076a:	f000 f9fd 	bl	8000b68 <UartPuts>
		DelayMs(1000);
 800076e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000772:	f7ff ff95 	bl	80006a0 <DelayMs>
	while(AccelWaitForChange()){
 8000776:	f7ff fd8c 	bl	8000292 <AccelWaitForChange>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1c3      	bne.n	8000708 <main+0x18>
 8000780:	2300      	movs	r3, #0


	}


}
 8000782:	4618      	mov	r0, r3
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800153c 	.word	0x0800153c
 8000790:	08001544 	.word	0x08001544
 8000794:	08001548 	.word	0x08001548

08000798 <SpiInit>:
 */

#include "spi.h"

void SpiInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	// config PE3 as GPIO

	//clock enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <SpiInit+0xbc>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <SpiInit+0xbc>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6313      	str	r3, [r2, #48]	@ 0x30

	//gpio mode is output (0 1)
	GPIOE->MODER |= BV(3*2);
 80007a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <SpiInit+0xc0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000858 <SpiInit+0xc0>)
 80007ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~BV(3*2+1);
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <SpiInit+0xc0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <SpiInit+0xc0>)
 80007ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007be:	6013      	str	r3, [r2, #0]

	// gpio output data push pull
	GPIOE->OTYPER &= ~BV(3);
 80007c0:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <SpiInit+0xc0>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4a24      	ldr	r2, [pc, #144]	@ (8000858 <SpiInit+0xc0>)
 80007c6:	f023 0308 	bic.w	r3, r3, #8
 80007ca:	6053      	str	r3, [r2, #4]

	// gpio output speed low
	GPIOE->OSPEEDR &= ~(BV(3*2) | BV(3*2+1));
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <SpiInit+0xc0>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	4a21      	ldr	r2, [pc, #132]	@ (8000858 <SpiInit+0xc0>)
 80007d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80007d6:	6093      	str	r3, [r2, #8]

	// disable pull-up and pull down resistor
    GPIOE->PUPDR &= ~(BV(3*2) | BV(3*2+1));
 80007d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <SpiInit+0xc0>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000858 <SpiInit+0xc0>)
 80007de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80007e2:	60d3      	str	r3, [r2, #12]

	// config PA5, PA6, PA7 as SPI1
    // gpio config
    // clock enable
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <SpiInit+0xbc>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000854 <SpiInit+0xbc>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6313      	str	r3, [r2, #48]	@ 0x30

    //gpio mode alt fun (1 0)
    GPIOA->MODER |= BV(5*2+1) | BV(6*2+1) | BV(7*2+1);
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <SpiInit+0xc4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	@ (800085c <SpiInit+0xc4>)
 80007f6:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80007fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(BV(5*2) | BV(6*2) | BV(7*2));
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <SpiInit+0xc4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a16      	ldr	r2, [pc, #88]	@ (800085c <SpiInit+0xc4>)
 8000802:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000806:	6013      	str	r3, [r2, #0]

    //set alt fun = SPI1 = AF5
    GPIOA->AFR[0] |= (5<< (5*4) | (5 << (6*4)) | (5 << (7*4)));
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <SpiInit+0xc4>)
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	4a13      	ldr	r2, [pc, #76]	@ (800085c <SpiInit+0xc4>)
 800080e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000812:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000816:	6213      	str	r3, [r2, #32]

    //disable pull-up and pull-down resistor
    GPIOA-> PUPDR &= ~(BV(5*2+1) | BV(6*2+1) | BV(7*2+1) | BV(5*2) | BV(6*2) | BV(7*2));
 8000818:	4b10      	ldr	r3, [pc, #64]	@ (800085c <SpiInit+0xc4>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <SpiInit+0xc4>)
 800081e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000822:	60d3      	str	r3, [r2, #12]

    //spi config
    //enable spi clock
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <SpiInit+0xbc>)
 8000826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000828:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <SpiInit+0xbc>)
 800082a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800082e:	6453      	str	r3, [r2, #68]	@ 0x44

    //config spi in CR1
    //master mode, software slave mgmt, set bit rate (010 = 2Mhz), cpol =0, cpha=0, lsbf=0
     SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1;
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <SpiInit+0xc8>)
 8000832:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000836:	601a      	str	r2, [r3, #0]

     // disable spi intrs & dma (default), frame format = spi
     SPI1->CR2 = 0x0000;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <SpiInit+0xc8>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]

     //enable spi in CR1
     SPI1->CR1 |= SPI_CR1_SPE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <SpiInit+0xc8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <SpiInit+0xc8>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	6013      	str	r3, [r2, #0]

}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40021000 	.word	0x40021000
 800085c:	40020000 	.word	0x40020000
 8000860:	40013000 	.word	0x40013000

08000864 <SpiCSEnable>:
void SpiCSEnable(void) // CSEnable -- Slave Select Enable
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
    //write 0
	GPIOE->ODR &= ~BV(3);
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <SpiCSEnable+0x18>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4a03      	ldr	r2, [pc, #12]	@ (800087c <SpiCSEnable+0x18>)
 800086e:	f023 0308 	bic.w	r3, r3, #8
 8000872:	6153      	str	r3, [r2, #20]

}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40021000 	.word	0x40021000

08000880 <SpiCSDisable>:
void SpiCSDisable(void) // CSDisable
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  //write 1
	GPIOE->ODR |= BV(3);
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <SpiCSDisable+0x18>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a03      	ldr	r2, [pc, #12]	@ (8000898 <SpiCSDisable+0x18>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6153      	str	r3, [r2, #20]

}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <SpiTransfer>:
uint16_t SpiTransfer(uint16_t data) // here transmit and receive occur same time
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
   //wait until tx regr is not empty
	while(!(SPI1->SR & SPI_SR_TXE));
 80008a6:	bf00      	nop
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <SpiTransfer+0x3c>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f9      	beq.n	80008a8 <SpiTransfer+0xc>
	//write data into DR
	SPI1->DR = data;
 80008b4:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <SpiTransfer+0x3c>)
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	60d3      	str	r3, [r2, #12]
	//wait until data is received
	while(!(SPI1->SR & SPI_SR_RXNE));
 80008ba:	bf00      	nop
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <SpiTransfer+0x3c>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <SpiTransfer+0x20>
	//return the received data
	return SPI1->DR;
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <SpiTransfer+0x3c>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	b29b      	uxth	r3, r3

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	40013000 	.word	0x40013000

080008dc <SpiTransmit>:
void SpiTransmit(uint16_t data)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
   SpiTransfer(data);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffd7 	bl	800089c <SpiTransfer>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <SpiReceive>:
uint16_t SpiReceive(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
  uint16_t data = SpiTransfer(0x00);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ffcd 	bl	800089c <SpiTransfer>
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  return data;
 8000906:	88fb      	ldrh	r3, [r7, #6]

}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <SpiWrite>:
void SpiWrite(uint8_t internalAddr, uint8_t data[], uint8_t size)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
  SpiCSEnable();
 8000920:	f7ff ffa0 	bl	8000864 <SpiCSEnable>
  internalAddr &= ~BV(7);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800092a:	71fb      	strb	r3, [r7, #7]
  SpiTransmit(internalAddr);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ffd3 	bl	80008dc <SpiTransmit>
  for(int i=0; i<size; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e009      	b.n	8000950 <SpiWrite+0x40>
	  SpiTransmit(data[i]);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffc9 	bl	80008dc <SpiTransmit>
  for(int i=0; i<size; i++)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3301      	adds	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf1      	blt.n	800093c <SpiWrite+0x2c>
  SpiCSDisable();
 8000958:	f7ff ff92 	bl	8000880 <SpiCSDisable>

}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <SpiRead>:
void SpiRead(uint8_t internalAddr, uint8_t data[], uint8_t size)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]
	SpiCSEnable();
 8000974:	f7ff ff76 	bl	8000864 <SpiCSEnable>
	internalAddr |= BV(7);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800097e:	71fb      	strb	r3, [r7, #7]
	  SpiTransmit(internalAddr);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ffa9 	bl	80008dc <SpiTransmit>
	  for(int i=0; i<size; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e00b      	b.n	80009a8 <SpiRead+0x44>
		  data[i] = SpiReceive();
 8000990:	f7ff ffb1 	bl	80008f6 <SpiReceive>
 8000994:	4603      	mov	r3, r0
 8000996:	4619      	mov	r1, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	b2ca      	uxtb	r2, r1
 80009a0:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<size; i++)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbef      	blt.n	8000990 <SpiRead+0x2c>
	  SpiCSDisable();
 80009b0:	f7ff ff66 	bl	8000880 <SpiCSDisable>

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	@ (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f000 f924 	bl	8000c38 <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20020000 	.word	0x20020000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	20000070 	.word	0x20000070
 8000a24:	200001c0 	.word	0x200001c0

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000a2c:	f000 f802 	bl	8000a34 <DWT_Init>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <DWT_Init+0x58>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <DWT_Init+0x58>)
 8000a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000a42:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <DWT_Init+0x58>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <DWT_Init+0x58>)
 8000a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a4e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <DWT_Init+0x5c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0e      	ldr	r2, [pc, #56]	@ (8000a90 <DWT_Init+0x5c>)
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <DWT_Init+0x5c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <DWT_Init+0x5c>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <DWT_Init+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000a6e:	bf00      	nop
    __ASM volatile ("NOP");
 8000a70:	bf00      	nop
    __ASM volatile ("NOP");
 8000a72:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <DWT_Init+0x5c>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000edf0 	.word	0xe000edf0
 8000a90:	e0001000 	.word	0xe0001000

08000a94 <UartInit>:
 */

#include "uart.h"

void UartInit(uint32_t baud)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	/* GPIO Config*/
	// enable gpio clock
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <UartInit+0x9c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa0:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <UartInit+0x9c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) |BV(2*3+1) | BV(2*3));
 8000aa8:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <UartInit+0xa0>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <UartInit+0xa0>)
 8000aae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ab2:	60d3      	str	r3, [r2, #12]

	//set gpio (PA2, PA3) mode as alternate function = 1 0
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <UartInit+0xa0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b34 <UartInit+0xa0>)
 8000aba:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000abe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~ (BV(2*2) | BV(2*3));
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <UartInit+0xa0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <UartInit+0xa0>)
 8000ac6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000aca:	6013      	str	r3, [r2, #0]

	//set gpio (PA2, PA3) pin alt fun as uart (AF7) -- AFRL = AFR[0], AFRH =AFR[1]

	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));  //?
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <UartInit+0xa0>)
 8000ace:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 8000ad2:	621a      	str	r2, [r3, #32]

	/* UART config */
	// enable UART2 clock

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <UartInit+0x9c>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <UartInit+0x9c>)
 8000ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ade:	6413      	str	r3, [r2, #64]	@ 0x40

	//UART2 config (8N1) = 8-bit data transfer =0, disable parity =0, tx en=1, rx en=1
	// user manualpg no. 1010

	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <UartInit+0xa4>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	60da      	str	r2, [r3, #12]

	//baud rate setting
	// user manual pg no. 1010

	if(baud == 9600)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000aec:	d104      	bne.n	8000af8 <UartInit+0x64>
		USART2->BRR = 0x0683;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <UartInit+0xa4>)
 8000af0:	f240 6283 	movw	r2, #1667	@ 0x683
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	e00f      	b.n	8000b18 <UartInit+0x84>
	else if(baud == 38400)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000afe:	d104      	bne.n	8000b0a <UartInit+0x76>
		USART2-> BRR = 0x01A1;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <UartInit+0xa4>)
 8000b02:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	e006      	b.n	8000b18 <UartInit+0x84>
	else if(baud == 115200)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000b10:	d102      	bne.n	8000b18 <UartInit+0x84>
		USART2->BRR =0x008B;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <UartInit+0xa4>)
 8000b14:	228b      	movs	r2, #139	@ 0x8b
 8000b16:	609a      	str	r2, [r3, #8]

	// enable uart =1
	USART2->CR1 |= USART_CR1_UE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <UartInit+0xa4>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <UartInit+0xa4>)
 8000b1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b22:	60d3      	str	r3, [r2, #12]


}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40004400 	.word	0x40004400

08000b3c <UartPutch>:
void UartPutch(int ch)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR =ch;
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <UartPutch+0x28>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6053      	str	r3, [r2, #4]

	//wait until Tx is done (unitil Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 8000b4a:	bf00      	nop
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <UartPutch+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <UartPutch+0x10>
		;


}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40004400 	.word	0x40004400

08000b68 <UartPuts>:
	//read char from RDR
	return USART2->DR;
}

void UartPuts(char *str)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e009      	b.n	8000b8a <UartPuts+0x22>
		UartPutch(str[i]);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffdc 	bl	8000b3c <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1ef      	bne.n	8000b76 <UartPuts+0xe>
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba4:	f7ff ff40 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bce:	f000 f839 	bl	8000c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fd8d 	bl	80006f0 <main>

08000bd6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   r0, =_estack
 8000bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000be4:	08001598 	.word	0x08001598
  ldr r2, =_sbss
 8000be8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000bec:	200001bc 	.word	0x200001bc

08000bf0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <siprintf>:
 8000bf4:	b40e      	push	{r1, r2, r3}
 8000bf6:	b510      	push	{r4, lr}
 8000bf8:	b09d      	sub	sp, #116	@ 0x74
 8000bfa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000bfc:	9002      	str	r0, [sp, #8]
 8000bfe:	9006      	str	r0, [sp, #24]
 8000c00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000c04:	480a      	ldr	r0, [pc, #40]	@ (8000c30 <siprintf+0x3c>)
 8000c06:	9107      	str	r1, [sp, #28]
 8000c08:	9104      	str	r1, [sp, #16]
 8000c0a:	490a      	ldr	r1, [pc, #40]	@ (8000c34 <siprintf+0x40>)
 8000c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c10:	9105      	str	r1, [sp, #20]
 8000c12:	2400      	movs	r4, #0
 8000c14:	a902      	add	r1, sp, #8
 8000c16:	6800      	ldr	r0, [r0, #0]
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000c1c:	f000 f98c 	bl	8000f38 <_svfiprintf_r>
 8000c20:	9b02      	ldr	r3, [sp, #8]
 8000c22:	701c      	strb	r4, [r3, #0]
 8000c24:	b01d      	add	sp, #116	@ 0x74
 8000c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c2a:	b003      	add	sp, #12
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000004 	.word	0x20000004
 8000c34:	ffff0208 	.word	0xffff0208

08000c38 <__errno>:
 8000c38:	4b01      	ldr	r3, [pc, #4]	@ (8000c40 <__errno+0x8>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000004 	.word	0x20000004

08000c44 <__libc_init_array>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	4d0d      	ldr	r5, [pc, #52]	@ (8000c7c <__libc_init_array+0x38>)
 8000c48:	4c0d      	ldr	r4, [pc, #52]	@ (8000c80 <__libc_init_array+0x3c>)
 8000c4a:	1b64      	subs	r4, r4, r5
 8000c4c:	10a4      	asrs	r4, r4, #2
 8000c4e:	2600      	movs	r6, #0
 8000c50:	42a6      	cmp	r6, r4
 8000c52:	d109      	bne.n	8000c68 <__libc_init_array+0x24>
 8000c54:	4d0b      	ldr	r5, [pc, #44]	@ (8000c84 <__libc_init_array+0x40>)
 8000c56:	4c0c      	ldr	r4, [pc, #48]	@ (8000c88 <__libc_init_array+0x44>)
 8000c58:	f000 fc64 	bl	8001524 <_init>
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	10a4      	asrs	r4, r4, #2
 8000c60:	2600      	movs	r6, #0
 8000c62:	42a6      	cmp	r6, r4
 8000c64:	d105      	bne.n	8000c72 <__libc_init_array+0x2e>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6c:	4798      	blx	r3
 8000c6e:	3601      	adds	r6, #1
 8000c70:	e7ee      	b.n	8000c50 <__libc_init_array+0xc>
 8000c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c76:	4798      	blx	r3
 8000c78:	3601      	adds	r6, #1
 8000c7a:	e7f2      	b.n	8000c62 <__libc_init_array+0x1e>
 8000c7c:	08001590 	.word	0x08001590
 8000c80:	08001590 	.word	0x08001590
 8000c84:	08001590 	.word	0x08001590
 8000c88:	08001594 	.word	0x08001594

08000c8c <__retarget_lock_acquire_recursive>:
 8000c8c:	4770      	bx	lr

08000c8e <__retarget_lock_release_recursive>:
 8000c8e:	4770      	bx	lr

08000c90 <_free_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4605      	mov	r5, r0
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d041      	beq.n	8000d1c <_free_r+0x8c>
 8000c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c9c:	1f0c      	subs	r4, r1, #4
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bfb8      	it	lt
 8000ca2:	18e4      	addlt	r4, r4, r3
 8000ca4:	f000 f8e0 	bl	8000e68 <__malloc_lock>
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <_free_r+0x90>)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	b933      	cbnz	r3, 8000cbc <_free_r+0x2c>
 8000cae:	6063      	str	r3, [r4, #4]
 8000cb0:	6014      	str	r4, [r2, #0]
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb8:	f000 b8dc 	b.w	8000e74 <__malloc_unlock>
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d908      	bls.n	8000cd2 <_free_r+0x42>
 8000cc0:	6820      	ldr	r0, [r4, #0]
 8000cc2:	1821      	adds	r1, r4, r0
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	bf01      	itttt	eq
 8000cc8:	6819      	ldreq	r1, [r3, #0]
 8000cca:	685b      	ldreq	r3, [r3, #4]
 8000ccc:	1809      	addeq	r1, r1, r0
 8000cce:	6021      	streq	r1, [r4, #0]
 8000cd0:	e7ed      	b.n	8000cae <_free_r+0x1e>
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	b10b      	cbz	r3, 8000cdc <_free_r+0x4c>
 8000cd8:	42a3      	cmp	r3, r4
 8000cda:	d9fa      	bls.n	8000cd2 <_free_r+0x42>
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	1850      	adds	r0, r2, r1
 8000ce0:	42a0      	cmp	r0, r4
 8000ce2:	d10b      	bne.n	8000cfc <_free_r+0x6c>
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	4401      	add	r1, r0
 8000ce8:	1850      	adds	r0, r2, r1
 8000cea:	4283      	cmp	r3, r0
 8000cec:	6011      	str	r1, [r2, #0]
 8000cee:	d1e0      	bne.n	8000cb2 <_free_r+0x22>
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	6053      	str	r3, [r2, #4]
 8000cf6:	4408      	add	r0, r1
 8000cf8:	6010      	str	r0, [r2, #0]
 8000cfa:	e7da      	b.n	8000cb2 <_free_r+0x22>
 8000cfc:	d902      	bls.n	8000d04 <_free_r+0x74>
 8000cfe:	230c      	movs	r3, #12
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	e7d6      	b.n	8000cb2 <_free_r+0x22>
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	1821      	adds	r1, r4, r0
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf04      	itt	eq
 8000d0c:	6819      	ldreq	r1, [r3, #0]
 8000d0e:	685b      	ldreq	r3, [r3, #4]
 8000d10:	6063      	str	r3, [r4, #4]
 8000d12:	bf04      	itt	eq
 8000d14:	1809      	addeq	r1, r1, r0
 8000d16:	6021      	streq	r1, [r4, #0]
 8000d18:	6054      	str	r4, [r2, #4]
 8000d1a:	e7ca      	b.n	8000cb2 <_free_r+0x22>
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001b8 	.word	0x200001b8

08000d24 <sbrk_aligned>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	4e0f      	ldr	r6, [pc, #60]	@ (8000d64 <sbrk_aligned+0x40>)
 8000d28:	460c      	mov	r4, r1
 8000d2a:	6831      	ldr	r1, [r6, #0]
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	b911      	cbnz	r1, 8000d36 <sbrk_aligned+0x12>
 8000d30:	f000 fba4 	bl	800147c <_sbrk_r>
 8000d34:	6030      	str	r0, [r6, #0]
 8000d36:	4621      	mov	r1, r4
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f000 fb9f 	bl	800147c <_sbrk_r>
 8000d3e:	1c43      	adds	r3, r0, #1
 8000d40:	d103      	bne.n	8000d4a <sbrk_aligned+0x26>
 8000d42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000d46:	4620      	mov	r0, r4
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	1cc4      	adds	r4, r0, #3
 8000d4c:	f024 0403 	bic.w	r4, r4, #3
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	d0f8      	beq.n	8000d46 <sbrk_aligned+0x22>
 8000d54:	1a21      	subs	r1, r4, r0
 8000d56:	4628      	mov	r0, r5
 8000d58:	f000 fb90 	bl	800147c <_sbrk_r>
 8000d5c:	3001      	adds	r0, #1
 8000d5e:	d1f2      	bne.n	8000d46 <sbrk_aligned+0x22>
 8000d60:	e7ef      	b.n	8000d42 <sbrk_aligned+0x1e>
 8000d62:	bf00      	nop
 8000d64:	200001b4 	.word	0x200001b4

08000d68 <_malloc_r>:
 8000d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d6c:	1ccd      	adds	r5, r1, #3
 8000d6e:	f025 0503 	bic.w	r5, r5, #3
 8000d72:	3508      	adds	r5, #8
 8000d74:	2d0c      	cmp	r5, #12
 8000d76:	bf38      	it	cc
 8000d78:	250c      	movcc	r5, #12
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	db01      	blt.n	8000d84 <_malloc_r+0x1c>
 8000d80:	42a9      	cmp	r1, r5
 8000d82:	d904      	bls.n	8000d8e <_malloc_r+0x26>
 8000d84:	230c      	movs	r3, #12
 8000d86:	6033      	str	r3, [r6, #0]
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e64 <_malloc_r+0xfc>
 8000d92:	f000 f869 	bl	8000e68 <__malloc_lock>
 8000d96:	f8d8 3000 	ldr.w	r3, [r8]
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	bb44      	cbnz	r4, 8000df0 <_malloc_r+0x88>
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4630      	mov	r0, r6
 8000da2:	f7ff ffbf 	bl	8000d24 <sbrk_aligned>
 8000da6:	1c43      	adds	r3, r0, #1
 8000da8:	4604      	mov	r4, r0
 8000daa:	d158      	bne.n	8000e5e <_malloc_r+0xf6>
 8000dac:	f8d8 4000 	ldr.w	r4, [r8]
 8000db0:	4627      	mov	r7, r4
 8000db2:	2f00      	cmp	r7, #0
 8000db4:	d143      	bne.n	8000e3e <_malloc_r+0xd6>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d04b      	beq.n	8000e52 <_malloc_r+0xea>
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	eb04 0903 	add.w	r9, r4, r3
 8000dc4:	f000 fb5a 	bl	800147c <_sbrk_r>
 8000dc8:	4581      	cmp	r9, r0
 8000dca:	d142      	bne.n	8000e52 <_malloc_r+0xea>
 8000dcc:	6821      	ldr	r1, [r4, #0]
 8000dce:	1a6d      	subs	r5, r5, r1
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	f7ff ffa6 	bl	8000d24 <sbrk_aligned>
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d03a      	beq.n	8000e52 <_malloc_r+0xea>
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	442b      	add	r3, r5
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	f8d8 3000 	ldr.w	r3, [r8]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	bb62      	cbnz	r2, 8000e44 <_malloc_r+0xdc>
 8000dea:	f8c8 7000 	str.w	r7, [r8]
 8000dee:	e00f      	b.n	8000e10 <_malloc_r+0xa8>
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	1b52      	subs	r2, r2, r5
 8000df4:	d420      	bmi.n	8000e38 <_malloc_r+0xd0>
 8000df6:	2a0b      	cmp	r2, #11
 8000df8:	d917      	bls.n	8000e2a <_malloc_r+0xc2>
 8000dfa:	1961      	adds	r1, r4, r5
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	6025      	str	r5, [r4, #0]
 8000e00:	bf18      	it	ne
 8000e02:	6059      	strne	r1, [r3, #4]
 8000e04:	6863      	ldr	r3, [r4, #4]
 8000e06:	bf08      	it	eq
 8000e08:	f8c8 1000 	streq.w	r1, [r8]
 8000e0c:	5162      	str	r2, [r4, r5]
 8000e0e:	604b      	str	r3, [r1, #4]
 8000e10:	4630      	mov	r0, r6
 8000e12:	f000 f82f 	bl	8000e74 <__malloc_unlock>
 8000e16:	f104 000b 	add.w	r0, r4, #11
 8000e1a:	1d23      	adds	r3, r4, #4
 8000e1c:	f020 0007 	bic.w	r0, r0, #7
 8000e20:	1ac2      	subs	r2, r0, r3
 8000e22:	bf1c      	itt	ne
 8000e24:	1a1b      	subne	r3, r3, r0
 8000e26:	50a3      	strne	r3, [r4, r2]
 8000e28:	e7af      	b.n	8000d8a <_malloc_r+0x22>
 8000e2a:	6862      	ldr	r2, [r4, #4]
 8000e2c:	42a3      	cmp	r3, r4
 8000e2e:	bf0c      	ite	eq
 8000e30:	f8c8 2000 	streq.w	r2, [r8]
 8000e34:	605a      	strne	r2, [r3, #4]
 8000e36:	e7eb      	b.n	8000e10 <_malloc_r+0xa8>
 8000e38:	4623      	mov	r3, r4
 8000e3a:	6864      	ldr	r4, [r4, #4]
 8000e3c:	e7ae      	b.n	8000d9c <_malloc_r+0x34>
 8000e3e:	463c      	mov	r4, r7
 8000e40:	687f      	ldr	r7, [r7, #4]
 8000e42:	e7b6      	b.n	8000db2 <_malloc_r+0x4a>
 8000e44:	461a      	mov	r2, r3
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d1fb      	bne.n	8000e44 <_malloc_r+0xdc>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	6053      	str	r3, [r2, #4]
 8000e50:	e7de      	b.n	8000e10 <_malloc_r+0xa8>
 8000e52:	230c      	movs	r3, #12
 8000e54:	6033      	str	r3, [r6, #0]
 8000e56:	4630      	mov	r0, r6
 8000e58:	f000 f80c 	bl	8000e74 <__malloc_unlock>
 8000e5c:	e794      	b.n	8000d88 <_malloc_r+0x20>
 8000e5e:	6005      	str	r5, [r0, #0]
 8000e60:	e7d6      	b.n	8000e10 <_malloc_r+0xa8>
 8000e62:	bf00      	nop
 8000e64:	200001b8 	.word	0x200001b8

08000e68 <__malloc_lock>:
 8000e68:	4801      	ldr	r0, [pc, #4]	@ (8000e70 <__malloc_lock+0x8>)
 8000e6a:	f7ff bf0f 	b.w	8000c8c <__retarget_lock_acquire_recursive>
 8000e6e:	bf00      	nop
 8000e70:	200001b0 	.word	0x200001b0

08000e74 <__malloc_unlock>:
 8000e74:	4801      	ldr	r0, [pc, #4]	@ (8000e7c <__malloc_unlock+0x8>)
 8000e76:	f7ff bf0a 	b.w	8000c8e <__retarget_lock_release_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	200001b0 	.word	0x200001b0

08000e80 <__ssputs_r>:
 8000e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e84:	688e      	ldr	r6, [r1, #8]
 8000e86:	461f      	mov	r7, r3
 8000e88:	42be      	cmp	r6, r7
 8000e8a:	680b      	ldr	r3, [r1, #0]
 8000e8c:	4682      	mov	sl, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4690      	mov	r8, r2
 8000e92:	d82d      	bhi.n	8000ef0 <__ssputs_r+0x70>
 8000e94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000e98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000e9c:	d026      	beq.n	8000eec <__ssputs_r+0x6c>
 8000e9e:	6965      	ldr	r5, [r4, #20]
 8000ea0:	6909      	ldr	r1, [r1, #16]
 8000ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ea6:	eba3 0901 	sub.w	r9, r3, r1
 8000eaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000eae:	1c7b      	adds	r3, r7, #1
 8000eb0:	444b      	add	r3, r9
 8000eb2:	106d      	asrs	r5, r5, #1
 8000eb4:	429d      	cmp	r5, r3
 8000eb6:	bf38      	it	cc
 8000eb8:	461d      	movcc	r5, r3
 8000eba:	0553      	lsls	r3, r2, #21
 8000ebc:	d527      	bpl.n	8000f0e <__ssputs_r+0x8e>
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f7ff ff52 	bl	8000d68 <_malloc_r>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	b360      	cbz	r0, 8000f22 <__ssputs_r+0xa2>
 8000ec8:	6921      	ldr	r1, [r4, #16]
 8000eca:	464a      	mov	r2, r9
 8000ecc:	f000 fae6 	bl	800149c <memcpy>
 8000ed0:	89a3      	ldrh	r3, [r4, #12]
 8000ed2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eda:	81a3      	strh	r3, [r4, #12]
 8000edc:	6126      	str	r6, [r4, #16]
 8000ede:	6165      	str	r5, [r4, #20]
 8000ee0:	444e      	add	r6, r9
 8000ee2:	eba5 0509 	sub.w	r5, r5, r9
 8000ee6:	6026      	str	r6, [r4, #0]
 8000ee8:	60a5      	str	r5, [r4, #8]
 8000eea:	463e      	mov	r6, r7
 8000eec:	42be      	cmp	r6, r7
 8000eee:	d900      	bls.n	8000ef2 <__ssputs_r+0x72>
 8000ef0:	463e      	mov	r6, r7
 8000ef2:	6820      	ldr	r0, [r4, #0]
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	4641      	mov	r1, r8
 8000ef8:	f000 faa6 	bl	8001448 <memmove>
 8000efc:	68a3      	ldr	r3, [r4, #8]
 8000efe:	1b9b      	subs	r3, r3, r6
 8000f00:	60a3      	str	r3, [r4, #8]
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	4433      	add	r3, r6
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	2000      	movs	r0, #0
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462a      	mov	r2, r5
 8000f10:	f000 fad2 	bl	80014b8 <_realloc_r>
 8000f14:	4606      	mov	r6, r0
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d1e0      	bne.n	8000edc <__ssputs_r+0x5c>
 8000f1a:	6921      	ldr	r1, [r4, #16]
 8000f1c:	4650      	mov	r0, sl
 8000f1e:	f7ff feb7 	bl	8000c90 <_free_r>
 8000f22:	230c      	movs	r3, #12
 8000f24:	f8ca 3000 	str.w	r3, [sl]
 8000f28:	89a3      	ldrh	r3, [r4, #12]
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2e:	81a3      	strh	r3, [r4, #12]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f34:	e7e9      	b.n	8000f0a <__ssputs_r+0x8a>
	...

08000f38 <_svfiprintf_r>:
 8000f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	898b      	ldrh	r3, [r1, #12]
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	b09d      	sub	sp, #116	@ 0x74
 8000f44:	4607      	mov	r7, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	d510      	bpl.n	8000f6e <_svfiprintf_r+0x36>
 8000f4c:	690b      	ldr	r3, [r1, #16]
 8000f4e:	b973      	cbnz	r3, 8000f6e <_svfiprintf_r+0x36>
 8000f50:	2140      	movs	r1, #64	@ 0x40
 8000f52:	f7ff ff09 	bl	8000d68 <_malloc_r>
 8000f56:	6028      	str	r0, [r5, #0]
 8000f58:	6128      	str	r0, [r5, #16]
 8000f5a:	b930      	cbnz	r0, 8000f6a <_svfiprintf_r+0x32>
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f64:	b01d      	add	sp, #116	@ 0x74
 8000f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f6a:	2340      	movs	r3, #64	@ 0x40
 8000f6c:	616b      	str	r3, [r5, #20]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f72:	2320      	movs	r3, #32
 8000f74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f7c:	2330      	movs	r3, #48	@ 0x30
 8000f7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800111c <_svfiprintf_r+0x1e4>
 8000f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000f86:	f04f 0901 	mov.w	r9, #1
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	469a      	mov	sl, r3
 8000f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f92:	b10a      	cbz	r2, 8000f98 <_svfiprintf_r+0x60>
 8000f94:	2a25      	cmp	r2, #37	@ 0x25
 8000f96:	d1f9      	bne.n	8000f8c <_svfiprintf_r+0x54>
 8000f98:	ebba 0b04 	subs.w	fp, sl, r4
 8000f9c:	d00b      	beq.n	8000fb6 <_svfiprintf_r+0x7e>
 8000f9e:	465b      	mov	r3, fp
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	4638      	mov	r0, r7
 8000fa6:	f7ff ff6b 	bl	8000e80 <__ssputs_r>
 8000faa:	3001      	adds	r0, #1
 8000fac:	f000 80a7 	beq.w	80010fe <_svfiprintf_r+0x1c6>
 8000fb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000fb2:	445a      	add	r2, fp
 8000fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8000fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 809f 	beq.w	80010fe <_svfiprintf_r+0x1c6>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fca:	f10a 0a01 	add.w	sl, sl, #1
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	9307      	str	r3, [sp, #28]
 8000fd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000fd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8000fd8:	4654      	mov	r4, sl
 8000fda:	2205      	movs	r2, #5
 8000fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fe0:	484e      	ldr	r0, [pc, #312]	@ (800111c <_svfiprintf_r+0x1e4>)
 8000fe2:	f7ff f8f5 	bl	80001d0 <memchr>
 8000fe6:	9a04      	ldr	r2, [sp, #16]
 8000fe8:	b9d8      	cbnz	r0, 8001022 <_svfiprintf_r+0xea>
 8000fea:	06d0      	lsls	r0, r2, #27
 8000fec:	bf44      	itt	mi
 8000fee:	2320      	movmi	r3, #32
 8000ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ff4:	0711      	lsls	r1, r2, #28
 8000ff6:	bf44      	itt	mi
 8000ff8:	232b      	movmi	r3, #43	@ 0x2b
 8000ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8001002:	2b2a      	cmp	r3, #42	@ 0x2a
 8001004:	d015      	beq.n	8001032 <_svfiprintf_r+0xfa>
 8001006:	9a07      	ldr	r2, [sp, #28]
 8001008:	4654      	mov	r4, sl
 800100a:	2000      	movs	r0, #0
 800100c:	f04f 0c0a 	mov.w	ip, #10
 8001010:	4621      	mov	r1, r4
 8001012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001016:	3b30      	subs	r3, #48	@ 0x30
 8001018:	2b09      	cmp	r3, #9
 800101a:	d94b      	bls.n	80010b4 <_svfiprintf_r+0x17c>
 800101c:	b1b0      	cbz	r0, 800104c <_svfiprintf_r+0x114>
 800101e:	9207      	str	r2, [sp, #28]
 8001020:	e014      	b.n	800104c <_svfiprintf_r+0x114>
 8001022:	eba0 0308 	sub.w	r3, r0, r8
 8001026:	fa09 f303 	lsl.w	r3, r9, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	9304      	str	r3, [sp, #16]
 800102e:	46a2      	mov	sl, r4
 8001030:	e7d2      	b.n	8000fd8 <_svfiprintf_r+0xa0>
 8001032:	9b03      	ldr	r3, [sp, #12]
 8001034:	1d19      	adds	r1, r3, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	9103      	str	r1, [sp, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	bfbb      	ittet	lt
 800103e:	425b      	neglt	r3, r3
 8001040:	f042 0202 	orrlt.w	r2, r2, #2
 8001044:	9307      	strge	r3, [sp, #28]
 8001046:	9307      	strlt	r3, [sp, #28]
 8001048:	bfb8      	it	lt
 800104a:	9204      	strlt	r2, [sp, #16]
 800104c:	7823      	ldrb	r3, [r4, #0]
 800104e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001050:	d10a      	bne.n	8001068 <_svfiprintf_r+0x130>
 8001052:	7863      	ldrb	r3, [r4, #1]
 8001054:	2b2a      	cmp	r3, #42	@ 0x2a
 8001056:	d132      	bne.n	80010be <_svfiprintf_r+0x186>
 8001058:	9b03      	ldr	r3, [sp, #12]
 800105a:	1d1a      	adds	r2, r3, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	9203      	str	r2, [sp, #12]
 8001060:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001064:	3402      	adds	r4, #2
 8001066:	9305      	str	r3, [sp, #20]
 8001068:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001120 <_svfiprintf_r+0x1e8>
 800106c:	7821      	ldrb	r1, [r4, #0]
 800106e:	2203      	movs	r2, #3
 8001070:	4650      	mov	r0, sl
 8001072:	f7ff f8ad 	bl	80001d0 <memchr>
 8001076:	b138      	cbz	r0, 8001088 <_svfiprintf_r+0x150>
 8001078:	9b04      	ldr	r3, [sp, #16]
 800107a:	eba0 000a 	sub.w	r0, r0, sl
 800107e:	2240      	movs	r2, #64	@ 0x40
 8001080:	4082      	lsls	r2, r0
 8001082:	4313      	orrs	r3, r2
 8001084:	3401      	adds	r4, #1
 8001086:	9304      	str	r3, [sp, #16]
 8001088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800108c:	4825      	ldr	r0, [pc, #148]	@ (8001124 <_svfiprintf_r+0x1ec>)
 800108e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001092:	2206      	movs	r2, #6
 8001094:	f7ff f89c 	bl	80001d0 <memchr>
 8001098:	2800      	cmp	r0, #0
 800109a:	d036      	beq.n	800110a <_svfiprintf_r+0x1d2>
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <_svfiprintf_r+0x1f0>)
 800109e:	bb1b      	cbnz	r3, 80010e8 <_svfiprintf_r+0x1b0>
 80010a0:	9b03      	ldr	r3, [sp, #12]
 80010a2:	3307      	adds	r3, #7
 80010a4:	f023 0307 	bic.w	r3, r3, #7
 80010a8:	3308      	adds	r3, #8
 80010aa:	9303      	str	r3, [sp, #12]
 80010ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010ae:	4433      	add	r3, r6
 80010b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80010b2:	e76a      	b.n	8000f8a <_svfiprintf_r+0x52>
 80010b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80010b8:	460c      	mov	r4, r1
 80010ba:	2001      	movs	r0, #1
 80010bc:	e7a8      	b.n	8001010 <_svfiprintf_r+0xd8>
 80010be:	2300      	movs	r3, #0
 80010c0:	3401      	adds	r4, #1
 80010c2:	9305      	str	r3, [sp, #20]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 0c0a 	mov.w	ip, #10
 80010ca:	4620      	mov	r0, r4
 80010cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010d0:	3a30      	subs	r2, #48	@ 0x30
 80010d2:	2a09      	cmp	r2, #9
 80010d4:	d903      	bls.n	80010de <_svfiprintf_r+0x1a6>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0c6      	beq.n	8001068 <_svfiprintf_r+0x130>
 80010da:	9105      	str	r1, [sp, #20]
 80010dc:	e7c4      	b.n	8001068 <_svfiprintf_r+0x130>
 80010de:	fb0c 2101 	mla	r1, ip, r1, r2
 80010e2:	4604      	mov	r4, r0
 80010e4:	2301      	movs	r3, #1
 80010e6:	e7f0      	b.n	80010ca <_svfiprintf_r+0x192>
 80010e8:	ab03      	add	r3, sp, #12
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	462a      	mov	r2, r5
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <_svfiprintf_r+0x1f4>)
 80010f0:	a904      	add	r1, sp, #16
 80010f2:	4638      	mov	r0, r7
 80010f4:	f3af 8000 	nop.w
 80010f8:	1c42      	adds	r2, r0, #1
 80010fa:	4606      	mov	r6, r0
 80010fc:	d1d6      	bne.n	80010ac <_svfiprintf_r+0x174>
 80010fe:	89ab      	ldrh	r3, [r5, #12]
 8001100:	065b      	lsls	r3, r3, #25
 8001102:	f53f af2d 	bmi.w	8000f60 <_svfiprintf_r+0x28>
 8001106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001108:	e72c      	b.n	8000f64 <_svfiprintf_r+0x2c>
 800110a:	ab03      	add	r3, sp, #12
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	462a      	mov	r2, r5
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <_svfiprintf_r+0x1f4>)
 8001112:	a904      	add	r1, sp, #16
 8001114:	4638      	mov	r0, r7
 8001116:	f000 f879 	bl	800120c <_printf_i>
 800111a:	e7ed      	b.n	80010f8 <_svfiprintf_r+0x1c0>
 800111c:	08001552 	.word	0x08001552
 8001120:	08001558 	.word	0x08001558
 8001124:	0800155c 	.word	0x0800155c
 8001128:	00000000 	.word	0x00000000
 800112c:	08000e81 	.word	0x08000e81

08001130 <_printf_common>:
 8001130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001134:	4616      	mov	r6, r2
 8001136:	4698      	mov	r8, r3
 8001138:	688a      	ldr	r2, [r1, #8]
 800113a:	690b      	ldr	r3, [r1, #16]
 800113c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001140:	4293      	cmp	r3, r2
 8001142:	bfb8      	it	lt
 8001144:	4613      	movlt	r3, r2
 8001146:	6033      	str	r3, [r6, #0]
 8001148:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800114c:	4607      	mov	r7, r0
 800114e:	460c      	mov	r4, r1
 8001150:	b10a      	cbz	r2, 8001156 <_printf_common+0x26>
 8001152:	3301      	adds	r3, #1
 8001154:	6033      	str	r3, [r6, #0]
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	0699      	lsls	r1, r3, #26
 800115a:	bf42      	ittt	mi
 800115c:	6833      	ldrmi	r3, [r6, #0]
 800115e:	3302      	addmi	r3, #2
 8001160:	6033      	strmi	r3, [r6, #0]
 8001162:	6825      	ldr	r5, [r4, #0]
 8001164:	f015 0506 	ands.w	r5, r5, #6
 8001168:	d106      	bne.n	8001178 <_printf_common+0x48>
 800116a:	f104 0a19 	add.w	sl, r4, #25
 800116e:	68e3      	ldr	r3, [r4, #12]
 8001170:	6832      	ldr	r2, [r6, #0]
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	42ab      	cmp	r3, r5
 8001176:	dc26      	bgt.n	80011c6 <_printf_common+0x96>
 8001178:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	3b00      	subs	r3, #0
 8001180:	bf18      	it	ne
 8001182:	2301      	movne	r3, #1
 8001184:	0692      	lsls	r2, r2, #26
 8001186:	d42b      	bmi.n	80011e0 <_printf_common+0xb0>
 8001188:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800118c:	4641      	mov	r1, r8
 800118e:	4638      	mov	r0, r7
 8001190:	47c8      	blx	r9
 8001192:	3001      	adds	r0, #1
 8001194:	d01e      	beq.n	80011d4 <_printf_common+0xa4>
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	6922      	ldr	r2, [r4, #16]
 800119a:	f003 0306 	and.w	r3, r3, #6
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf02      	ittt	eq
 80011a2:	68e5      	ldreq	r5, [r4, #12]
 80011a4:	6833      	ldreq	r3, [r6, #0]
 80011a6:	1aed      	subeq	r5, r5, r3
 80011a8:	68a3      	ldr	r3, [r4, #8]
 80011aa:	bf0c      	ite	eq
 80011ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011b0:	2500      	movne	r5, #0
 80011b2:	4293      	cmp	r3, r2
 80011b4:	bfc4      	itt	gt
 80011b6:	1a9b      	subgt	r3, r3, r2
 80011b8:	18ed      	addgt	r5, r5, r3
 80011ba:	2600      	movs	r6, #0
 80011bc:	341a      	adds	r4, #26
 80011be:	42b5      	cmp	r5, r6
 80011c0:	d11a      	bne.n	80011f8 <_printf_common+0xc8>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e008      	b.n	80011d8 <_printf_common+0xa8>
 80011c6:	2301      	movs	r3, #1
 80011c8:	4652      	mov	r2, sl
 80011ca:	4641      	mov	r1, r8
 80011cc:	4638      	mov	r0, r7
 80011ce:	47c8      	blx	r9
 80011d0:	3001      	adds	r0, #1
 80011d2:	d103      	bne.n	80011dc <_printf_common+0xac>
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011dc:	3501      	adds	r5, #1
 80011de:	e7c6      	b.n	800116e <_printf_common+0x3e>
 80011e0:	18e1      	adds	r1, r4, r3
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	2030      	movs	r0, #48	@ 0x30
 80011e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80011ea:	4422      	add	r2, r4
 80011ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80011f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80011f4:	3302      	adds	r3, #2
 80011f6:	e7c7      	b.n	8001188 <_printf_common+0x58>
 80011f8:	2301      	movs	r3, #1
 80011fa:	4622      	mov	r2, r4
 80011fc:	4641      	mov	r1, r8
 80011fe:	4638      	mov	r0, r7
 8001200:	47c8      	blx	r9
 8001202:	3001      	adds	r0, #1
 8001204:	d0e6      	beq.n	80011d4 <_printf_common+0xa4>
 8001206:	3601      	adds	r6, #1
 8001208:	e7d9      	b.n	80011be <_printf_common+0x8e>
	...

0800120c <_printf_i>:
 800120c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	7e0f      	ldrb	r7, [r1, #24]
 8001212:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001214:	2f78      	cmp	r7, #120	@ 0x78
 8001216:	4691      	mov	r9, r2
 8001218:	4680      	mov	r8, r0
 800121a:	460c      	mov	r4, r1
 800121c:	469a      	mov	sl, r3
 800121e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001222:	d807      	bhi.n	8001234 <_printf_i+0x28>
 8001224:	2f62      	cmp	r7, #98	@ 0x62
 8001226:	d80a      	bhi.n	800123e <_printf_i+0x32>
 8001228:	2f00      	cmp	r7, #0
 800122a:	f000 80d1 	beq.w	80013d0 <_printf_i+0x1c4>
 800122e:	2f58      	cmp	r7, #88	@ 0x58
 8001230:	f000 80b8 	beq.w	80013a4 <_printf_i+0x198>
 8001234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001238:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800123c:	e03a      	b.n	80012b4 <_printf_i+0xa8>
 800123e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001242:	2b15      	cmp	r3, #21
 8001244:	d8f6      	bhi.n	8001234 <_printf_i+0x28>
 8001246:	a101      	add	r1, pc, #4	@ (adr r1, 800124c <_printf_i+0x40>)
 8001248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800124c:	080012a5 	.word	0x080012a5
 8001250:	080012b9 	.word	0x080012b9
 8001254:	08001235 	.word	0x08001235
 8001258:	08001235 	.word	0x08001235
 800125c:	08001235 	.word	0x08001235
 8001260:	08001235 	.word	0x08001235
 8001264:	080012b9 	.word	0x080012b9
 8001268:	08001235 	.word	0x08001235
 800126c:	08001235 	.word	0x08001235
 8001270:	08001235 	.word	0x08001235
 8001274:	08001235 	.word	0x08001235
 8001278:	080013b7 	.word	0x080013b7
 800127c:	080012e3 	.word	0x080012e3
 8001280:	08001371 	.word	0x08001371
 8001284:	08001235 	.word	0x08001235
 8001288:	08001235 	.word	0x08001235
 800128c:	080013d9 	.word	0x080013d9
 8001290:	08001235 	.word	0x08001235
 8001294:	080012e3 	.word	0x080012e3
 8001298:	08001235 	.word	0x08001235
 800129c:	08001235 	.word	0x08001235
 80012a0:	08001379 	.word	0x08001379
 80012a4:	6833      	ldr	r3, [r6, #0]
 80012a6:	1d1a      	adds	r2, r3, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6032      	str	r2, [r6, #0]
 80012ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80012b4:	2301      	movs	r3, #1
 80012b6:	e09c      	b.n	80013f2 <_printf_i+0x1e6>
 80012b8:	6833      	ldr	r3, [r6, #0]
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	1d19      	adds	r1, r3, #4
 80012be:	6031      	str	r1, [r6, #0]
 80012c0:	0606      	lsls	r6, r0, #24
 80012c2:	d501      	bpl.n	80012c8 <_printf_i+0xbc>
 80012c4:	681d      	ldr	r5, [r3, #0]
 80012c6:	e003      	b.n	80012d0 <_printf_i+0xc4>
 80012c8:	0645      	lsls	r5, r0, #25
 80012ca:	d5fb      	bpl.n	80012c4 <_printf_i+0xb8>
 80012cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	da03      	bge.n	80012dc <_printf_i+0xd0>
 80012d4:	232d      	movs	r3, #45	@ 0x2d
 80012d6:	426d      	negs	r5, r5
 80012d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012dc:	4858      	ldr	r0, [pc, #352]	@ (8001440 <_printf_i+0x234>)
 80012de:	230a      	movs	r3, #10
 80012e0:	e011      	b.n	8001306 <_printf_i+0xfa>
 80012e2:	6821      	ldr	r1, [r4, #0]
 80012e4:	6833      	ldr	r3, [r6, #0]
 80012e6:	0608      	lsls	r0, r1, #24
 80012e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80012ec:	d402      	bmi.n	80012f4 <_printf_i+0xe8>
 80012ee:	0649      	lsls	r1, r1, #25
 80012f0:	bf48      	it	mi
 80012f2:	b2ad      	uxthmi	r5, r5
 80012f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80012f6:	4852      	ldr	r0, [pc, #328]	@ (8001440 <_printf_i+0x234>)
 80012f8:	6033      	str	r3, [r6, #0]
 80012fa:	bf14      	ite	ne
 80012fc:	230a      	movne	r3, #10
 80012fe:	2308      	moveq	r3, #8
 8001300:	2100      	movs	r1, #0
 8001302:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001306:	6866      	ldr	r6, [r4, #4]
 8001308:	60a6      	str	r6, [r4, #8]
 800130a:	2e00      	cmp	r6, #0
 800130c:	db05      	blt.n	800131a <_printf_i+0x10e>
 800130e:	6821      	ldr	r1, [r4, #0]
 8001310:	432e      	orrs	r6, r5
 8001312:	f021 0104 	bic.w	r1, r1, #4
 8001316:	6021      	str	r1, [r4, #0]
 8001318:	d04b      	beq.n	80013b2 <_printf_i+0x1a6>
 800131a:	4616      	mov	r6, r2
 800131c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001320:	fb03 5711 	mls	r7, r3, r1, r5
 8001324:	5dc7      	ldrb	r7, [r0, r7]
 8001326:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800132a:	462f      	mov	r7, r5
 800132c:	42bb      	cmp	r3, r7
 800132e:	460d      	mov	r5, r1
 8001330:	d9f4      	bls.n	800131c <_printf_i+0x110>
 8001332:	2b08      	cmp	r3, #8
 8001334:	d10b      	bne.n	800134e <_printf_i+0x142>
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	07df      	lsls	r7, r3, #31
 800133a:	d508      	bpl.n	800134e <_printf_i+0x142>
 800133c:	6923      	ldr	r3, [r4, #16]
 800133e:	6861      	ldr	r1, [r4, #4]
 8001340:	4299      	cmp	r1, r3
 8001342:	bfde      	ittt	le
 8001344:	2330      	movle	r3, #48	@ 0x30
 8001346:	f806 3c01 	strble.w	r3, [r6, #-1]
 800134a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800134e:	1b92      	subs	r2, r2, r6
 8001350:	6122      	str	r2, [r4, #16]
 8001352:	f8cd a000 	str.w	sl, [sp]
 8001356:	464b      	mov	r3, r9
 8001358:	aa03      	add	r2, sp, #12
 800135a:	4621      	mov	r1, r4
 800135c:	4640      	mov	r0, r8
 800135e:	f7ff fee7 	bl	8001130 <_printf_common>
 8001362:	3001      	adds	r0, #1
 8001364:	d14a      	bne.n	80013fc <_printf_i+0x1f0>
 8001366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800136a:	b004      	add	sp, #16
 800136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	6023      	str	r3, [r4, #0]
 8001378:	4832      	ldr	r0, [pc, #200]	@ (8001444 <_printf_i+0x238>)
 800137a:	2778      	movs	r7, #120	@ 0x78
 800137c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	6831      	ldr	r1, [r6, #0]
 8001384:	061f      	lsls	r7, r3, #24
 8001386:	f851 5b04 	ldr.w	r5, [r1], #4
 800138a:	d402      	bmi.n	8001392 <_printf_i+0x186>
 800138c:	065f      	lsls	r7, r3, #25
 800138e:	bf48      	it	mi
 8001390:	b2ad      	uxthmi	r5, r5
 8001392:	6031      	str	r1, [r6, #0]
 8001394:	07d9      	lsls	r1, r3, #31
 8001396:	bf44      	itt	mi
 8001398:	f043 0320 	orrmi.w	r3, r3, #32
 800139c:	6023      	strmi	r3, [r4, #0]
 800139e:	b11d      	cbz	r5, 80013a8 <_printf_i+0x19c>
 80013a0:	2310      	movs	r3, #16
 80013a2:	e7ad      	b.n	8001300 <_printf_i+0xf4>
 80013a4:	4826      	ldr	r0, [pc, #152]	@ (8001440 <_printf_i+0x234>)
 80013a6:	e7e9      	b.n	800137c <_printf_i+0x170>
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f023 0320 	bic.w	r3, r3, #32
 80013ae:	6023      	str	r3, [r4, #0]
 80013b0:	e7f6      	b.n	80013a0 <_printf_i+0x194>
 80013b2:	4616      	mov	r6, r2
 80013b4:	e7bd      	b.n	8001332 <_printf_i+0x126>
 80013b6:	6833      	ldr	r3, [r6, #0]
 80013b8:	6825      	ldr	r5, [r4, #0]
 80013ba:	6961      	ldr	r1, [r4, #20]
 80013bc:	1d18      	adds	r0, r3, #4
 80013be:	6030      	str	r0, [r6, #0]
 80013c0:	062e      	lsls	r6, r5, #24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	d501      	bpl.n	80013ca <_printf_i+0x1be>
 80013c6:	6019      	str	r1, [r3, #0]
 80013c8:	e002      	b.n	80013d0 <_printf_i+0x1c4>
 80013ca:	0668      	lsls	r0, r5, #25
 80013cc:	d5fb      	bpl.n	80013c6 <_printf_i+0x1ba>
 80013ce:	8019      	strh	r1, [r3, #0]
 80013d0:	2300      	movs	r3, #0
 80013d2:	6123      	str	r3, [r4, #16]
 80013d4:	4616      	mov	r6, r2
 80013d6:	e7bc      	b.n	8001352 <_printf_i+0x146>
 80013d8:	6833      	ldr	r3, [r6, #0]
 80013da:	1d1a      	adds	r2, r3, #4
 80013dc:	6032      	str	r2, [r6, #0]
 80013de:	681e      	ldr	r6, [r3, #0]
 80013e0:	6862      	ldr	r2, [r4, #4]
 80013e2:	2100      	movs	r1, #0
 80013e4:	4630      	mov	r0, r6
 80013e6:	f7fe fef3 	bl	80001d0 <memchr>
 80013ea:	b108      	cbz	r0, 80013f0 <_printf_i+0x1e4>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	6060      	str	r0, [r4, #4]
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	6123      	str	r3, [r4, #16]
 80013f4:	2300      	movs	r3, #0
 80013f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013fa:	e7aa      	b.n	8001352 <_printf_i+0x146>
 80013fc:	6923      	ldr	r3, [r4, #16]
 80013fe:	4632      	mov	r2, r6
 8001400:	4649      	mov	r1, r9
 8001402:	4640      	mov	r0, r8
 8001404:	47d0      	blx	sl
 8001406:	3001      	adds	r0, #1
 8001408:	d0ad      	beq.n	8001366 <_printf_i+0x15a>
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	079b      	lsls	r3, r3, #30
 800140e:	d413      	bmi.n	8001438 <_printf_i+0x22c>
 8001410:	68e0      	ldr	r0, [r4, #12]
 8001412:	9b03      	ldr	r3, [sp, #12]
 8001414:	4298      	cmp	r0, r3
 8001416:	bfb8      	it	lt
 8001418:	4618      	movlt	r0, r3
 800141a:	e7a6      	b.n	800136a <_printf_i+0x15e>
 800141c:	2301      	movs	r3, #1
 800141e:	4632      	mov	r2, r6
 8001420:	4649      	mov	r1, r9
 8001422:	4640      	mov	r0, r8
 8001424:	47d0      	blx	sl
 8001426:	3001      	adds	r0, #1
 8001428:	d09d      	beq.n	8001366 <_printf_i+0x15a>
 800142a:	3501      	adds	r5, #1
 800142c:	68e3      	ldr	r3, [r4, #12]
 800142e:	9903      	ldr	r1, [sp, #12]
 8001430:	1a5b      	subs	r3, r3, r1
 8001432:	42ab      	cmp	r3, r5
 8001434:	dcf2      	bgt.n	800141c <_printf_i+0x210>
 8001436:	e7eb      	b.n	8001410 <_printf_i+0x204>
 8001438:	2500      	movs	r5, #0
 800143a:	f104 0619 	add.w	r6, r4, #25
 800143e:	e7f5      	b.n	800142c <_printf_i+0x220>
 8001440:	08001563 	.word	0x08001563
 8001444:	08001574 	.word	0x08001574

08001448 <memmove>:
 8001448:	4288      	cmp	r0, r1
 800144a:	b510      	push	{r4, lr}
 800144c:	eb01 0402 	add.w	r4, r1, r2
 8001450:	d902      	bls.n	8001458 <memmove+0x10>
 8001452:	4284      	cmp	r4, r0
 8001454:	4623      	mov	r3, r4
 8001456:	d807      	bhi.n	8001468 <memmove+0x20>
 8001458:	1e43      	subs	r3, r0, #1
 800145a:	42a1      	cmp	r1, r4
 800145c:	d008      	beq.n	8001470 <memmove+0x28>
 800145e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001466:	e7f8      	b.n	800145a <memmove+0x12>
 8001468:	4402      	add	r2, r0
 800146a:	4601      	mov	r1, r0
 800146c:	428a      	cmp	r2, r1
 800146e:	d100      	bne.n	8001472 <memmove+0x2a>
 8001470:	bd10      	pop	{r4, pc}
 8001472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800147a:	e7f7      	b.n	800146c <memmove+0x24>

0800147c <_sbrk_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d06      	ldr	r5, [pc, #24]	@ (8001498 <_sbrk_r+0x1c>)
 8001480:	2300      	movs	r3, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	602b      	str	r3, [r5, #0]
 8001488:	f7ff fa98 	bl	80009bc <_sbrk>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_sbrk_r+0x1a>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_sbrk_r+0x1a>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	200001ac 	.word	0x200001ac

0800149c <memcpy>:
 800149c:	440a      	add	r2, r1
 800149e:	4291      	cmp	r1, r2
 80014a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80014a4:	d100      	bne.n	80014a8 <memcpy+0xc>
 80014a6:	4770      	bx	lr
 80014a8:	b510      	push	{r4, lr}
 80014aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014b2:	4291      	cmp	r1, r2
 80014b4:	d1f9      	bne.n	80014aa <memcpy+0xe>
 80014b6:	bd10      	pop	{r4, pc}

080014b8 <_realloc_r>:
 80014b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014bc:	4607      	mov	r7, r0
 80014be:	4614      	mov	r4, r2
 80014c0:	460d      	mov	r5, r1
 80014c2:	b921      	cbnz	r1, 80014ce <_realloc_r+0x16>
 80014c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	4611      	mov	r1, r2
 80014ca:	f7ff bc4d 	b.w	8000d68 <_malloc_r>
 80014ce:	b92a      	cbnz	r2, 80014dc <_realloc_r+0x24>
 80014d0:	f7ff fbde 	bl	8000c90 <_free_r>
 80014d4:	4625      	mov	r5, r4
 80014d6:	4628      	mov	r0, r5
 80014d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014dc:	f000 f81a 	bl	8001514 <_malloc_usable_size_r>
 80014e0:	4284      	cmp	r4, r0
 80014e2:	4606      	mov	r6, r0
 80014e4:	d802      	bhi.n	80014ec <_realloc_r+0x34>
 80014e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80014ea:	d8f4      	bhi.n	80014d6 <_realloc_r+0x1e>
 80014ec:	4621      	mov	r1, r4
 80014ee:	4638      	mov	r0, r7
 80014f0:	f7ff fc3a 	bl	8000d68 <_malloc_r>
 80014f4:	4680      	mov	r8, r0
 80014f6:	b908      	cbnz	r0, 80014fc <_realloc_r+0x44>
 80014f8:	4645      	mov	r5, r8
 80014fa:	e7ec      	b.n	80014d6 <_realloc_r+0x1e>
 80014fc:	42b4      	cmp	r4, r6
 80014fe:	4622      	mov	r2, r4
 8001500:	4629      	mov	r1, r5
 8001502:	bf28      	it	cs
 8001504:	4632      	movcs	r2, r6
 8001506:	f7ff ffc9 	bl	800149c <memcpy>
 800150a:	4629      	mov	r1, r5
 800150c:	4638      	mov	r0, r7
 800150e:	f7ff fbbf 	bl	8000c90 <_free_r>
 8001512:	e7f1      	b.n	80014f8 <_realloc_r+0x40>

08001514 <_malloc_usable_size_r>:
 8001514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001518:	1f18      	subs	r0, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	bfbc      	itt	lt
 800151e:	580b      	ldrlt	r3, [r1, r0]
 8001520:	18c0      	addlt	r0, r0, r3
 8001522:	4770      	bx	lr

08001524 <_init>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	bf00      	nop
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr

08001530 <_fini>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr
